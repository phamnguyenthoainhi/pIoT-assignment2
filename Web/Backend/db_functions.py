import mysql.connector
from gcloud_db import create_connection
import sys

def bytes_to_int(bytes):
    result = 0
    if type(bytes) == int:
        return bytes
    for b in bytes:
        result = result * 256 + int(b)

    return result

def convertToBinaryData(filename):
    # Convert digital data to binary format
    with open(filename, 'rb') as file:
        binaryData = file.read()
    return binaryData

def insertBLOB(mydb, user_id, name, photo):
    try:
        cursor = mydb.cursor()
        sql_insert_blob_query = """ INSERT INTO photos (user_id, username, photo) VALUES (%s,%s,%s);"""
        insert_blob_tuple = (user_id, name, photo)
        cursor.execute(sql_insert_blob_query, insert_blob_tuple)
        print("INSERT INTO PHOTOS......")
        print(insert_blob_tuple)
        print(cursor.lastrowid)
        mydb.commit()
        return cursor.lastrowid
    except mysql.connector.Error as error:
        print(str(error))
# mydb = create_connection()        
# insertBLOB(mydb, 35, 'nhi', b'\xff\xd8\xff\xe0\x00\x10JFIF\x00\x01\x01\x01\x00H\x00H\x00\x00\xff\xe2\x02\x1cICC_PROFILE\x00\x01\x01\x00\x00\x02\x0clcms\x02\x10\x00\x00mntrRGB XYZ \x07\xdc\x00\x01\x00\x19\x00\x03\x00)\x009acspAPPL\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf6\xd6\x00\x01\x00\x00\x00\x00\xd3-lcms\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\ndesc\x00\x00\x00\xfc\x00\x00\x00^cprt\x00\x00\x01\\\x00\x00\x00\x0bwtpt\x00\x00\x01h\x00\x00\x00\x14bkpt\x00\x00\x01|\x00\x00\x00\x14rXYZ\x00\x00\x01\x90\x00\x00\x00\x14gXYZ\x00\x00\x01\xa4\x00\x00\x00\x14bXYZ\x00\x00\x01\xb8\x00\x00\x00\x14rTRC\x00\x00\x01\xcc\x00\x00\x00@gTRC\x00\x00\x01\xcc\x00\x00\x00@bTRC\x00\x00\x01\xcc\x00\x00\x00@desc\x00\x00\x00\x00\x00\x00\x00\x03c2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00text\x00\x00\x00\x00IX\x00\x00XYZ \x00\x00\x00\x00\x00\x00\xf6\xd6\x00\x01\x00\x00\x00\x00\xd3-XYZ \x00\x00\x00\x00\x00\x00\x03\x16\x00\x00\x033\x00\x00\x02\xa4XYZ \x00\x00\x00\x00\x00\x00o\xa2\x00\x008\xf5\x00\x00\x03\x90XYZ \x00\x00\x00\x00\x00\x00b\x99\x00\x00\xb7\x85\x00\x00\x18\xdaXYZ \x00\x00\x00\x00\x00\x00$\xa0\x00\x00\x0f\x84\x00\x00\xb6\xcfcurv\x00\x00\x00\x00\x00\x00\x00\x1a\x00\x00\x00\xcb\x01\xc9\x03c\x05\x92\x08k\x0b\xf6\x10?\x15Q\x1b4!\xf1)\x902\x18;\x92F\x05Qw]\xedkpz\x05\x89\xb1\x9a|\xaci\xbf}\xd3\xc3\xe90\xff\xff\xff\xdb\x00\x84\x00\x02\x03\x03\x03\x04\x03\x04\x05\x05\x04\x06\x06\x06\x06\x06\x08\x08\x07\x07\x08\x08\r\t\n\t\n\t\r\x13\x0c\x0e\x0c\x0c\x0e\x0c\x13\x11\x14\x11\x0f\x11\x14\x11\x1e\x18\x15\x15\x18\x1e#\x1d\x1c\x1d#*%%*525EE\\\x01\x02\x03\x03\x03\x04\x03\x04\x05\x05\x04\x06\x06\x06\x06\x06\x08\x08\x07\x07\x08\x08\r\t\n\t\n\t\r\x13\x0c\x0e\x0c\x0c\x0e\x0c\x13\x11\x14\x11\x0f\x11\x14\x11\x1e\x18\x15\x15\x18\x1e#\x1d\x1c\x1d#*%%*525EE\\\xff\xc0\x00\x11\x08\x00\x80\x00\x80\x03\x01"\x00\x02\x11\x01\x03\x11\x01\xff\xc4\x00~\x00\x00\x02\x02\x03\x01\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\t\x08\n\x05\x06\x07\x01\x02\x03\x04\x10\x00\x01\x03\x03\x03\x02\x04\x03\x05\x06\x04\x06\x03\x00\x00\x00\x01\x02\x03\x04\x00\x05\x06\x07\x11\x12\x08!\x13\x141ABQa\t"2Rr\x15#Cq\x81\xa2$s\x91\xb13Sb\x82\x92\xc1\x164f\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x11\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xda\x00\x0c\x03\x01\x00\x02\x11\x03\x11\x00?\x00\x7f\x94\xad\xba\xe7\xd6\xa9\xb8F\x9c1g\xb5\xca,]2\x15:\xc0u\x07e\xb3\x11\xb0<e\xa4\xfb\x15n\x11M&\xaa\xa9\xd7\xfeE"\xe3\xafOAS\x9b\xb5j\xb5Ca\x08\xfa\xba\x0b\xea?\xdf@\xac\n\x8e\xf5\xf3E\x14\x05\x14Q@QY;w\x91\xf3\xd1\xfc\xd8t\xc7\xf1\x13\xe3\x06\xb6\xf18o\xf7\xb8r\xed\xcboM\xeaE\xea\xa6\x87\xe5x+p.\'k\x8d\x82\xe6\xd2\x1f\xb5\xde\xa3\xa4\x98\xf2\x1atrG?\xf9N\xed\xea\x83A\x18h\xafv\xac\x87\x90\x9b\xe5<\xcf\x97s\xc0\xe5\xc7\xc5\xe2xo\xf2\xe5\xe9\xbd\x06:\x8a\xf7c^P\x14QE\x01^\x83\xb1\xaf(\xa0\xbf\xd2\xbd*\x90Z\xdf\x96\x9c\xafW3;\xce\xfb\xa2]\xdaIk\xfc\xa4+\xc3o\xfbR*\xe8\xf9\xf5\xdc\xda0\xac\x8a\xe2\x14\x13\xe4\xadSd\x03\xf5i\x95.\xa8~\xe2\x8a\x96I;\x93\xdc\x9f\xa9\xa0\xfc\xebs\x81\x8b^\xa7c\xd7{\xc4h\xaav\x1d\xb1\xd8\xcd\xccp\x7f\x07\xcd\x15\x06\xca\x87\xe5%\x1boZe<O\xb3\xb2\xd3h\xbd\x1dR\xb4\xdc\xa25*$\xdb|\x04?\x1d\xd1\xc9\x0e6V\xe8 \xd0#\xba)\x9bu5\xd2NI\xa6\xb3\xe5]\xec\xec??\x19Z\xf7K\xff\x00\x8d\xd8;\xfc\x12\x7f\xf4\xe5,\xd0\x85\x9d\xf6\x14\x1f\x00\xd3\xe8\xe8\x83Y\xec\x17\x0cf\xf3\xa7\x19a\x8c\xf4\x14F\x91.\x08\x96\x02\xda\\t\x82\xe4\x98\xea\n\xf6Gw\x05!r\x08\xac\x84\x19\x8fD\x94\xd3\xcd\x9d\x94\x83\xbf~\xe0\xfc\xc1\x1e\xe0\x8e\xc4{\x8a\x07\x0b\x0f\xa2\xdb\xd6\xa4X\xaf9\x866"\xe3\xf0\xae\x13\\~\xc1f\x93\xcc\xf3\x81\xf0:\xb7N\xe5\xb2\xe7\xaa\x05G\xab.5\x99\xe8\xd6@\xf4L\xeb\x04\xb8\x1b[\xbd\x9d\x99\r\xc2\xdb\xcd \x9e>+\x12Z\xdd\xa7\x07\xcd\xa7wA\xab\x0bh\xce\xbdX\xb3\xcd,\xb6\xdd\xed\xd1[\x17\x1el\xdb\xdf\xb5\xb5\xdb\xc1\x98F\xc1\x1fFH\x1c\xc2\xbf%q\xdcw\x1a\xb9k&Or\x9fw\x96\xb5\xe1v\xc9\xcb\x8d\x1a#g\x82o\xd2\xe2\x9e\x0e\xc9\x91\xb7\xacF\xd48\xb4\xd5\x02\xbe\xcdt\xbb\n\xcdm\xed;\xa7\xb8\xed\xe7*\xe4\xa0<\xfc;:mhh\x90\x14\xa6\xde}\x05\x0c\xad\xc4\xef\xdcx5\x082\xae\x9c\xb5\xbf\x17\x86\xb9\x97\\\x1a\xea\xc4d\x82T\xf2\x1a\x12\x10\x81\xf3Yd\xafj\xb2\xee\xb6\x9b.\x99c\xa8\xbabv\x08powI\xcc\xc2e\xc8\xcd\xf9v7RJ\xd4\xf4\xa6\x9a\xd9\x0e\xa5\xb4\'\xd0\xd4\x02\xb0\xf5\x15\xaa\x90/\x8f-\xdc\xec^^\xb7rr}\xb5p\x19e\x97\x9bA\xddm\xa1M\xa4\x16\xd6\x07\xa1\x06\x813e\xd1p\x196\x8b}\xca\xc4\xec\x98r\x14\x10\xd4\xebL\x8f\xde\x06\xdc\t\xee\xfcW\xfe6\x14~\x15\xec\xb4}k\x89\xd5\x85:\x93\xe9_\x1c\xbb?/*\xc5\xe2%\x84\xdc\xadr\xaeo\xc6m\x1cx;\x19\x82\xf8u\t\x1d\x82\x1f\xdf\x8a\xc7\xb2\xe9\x13\xdb1K\x95\xc3\x1d\xbe\xdd\xd9\x00\xb1i\xf2\x9ec\xe8%,\xb6\x83\xfe\xa2\x83C\xae\xed\x85\xe8\xc6\xaafP^\x99`\xc4\xaeW\x18\xcd\x1d\x94\xfb,\x92\xde\xff\x00 \xa3\xb0&\xb8P\xf5\x15j\xce\x8e\xb2\xfb\xcd\xf3J1\x0bk0W\n\xd9n\x83*3\x93O\x14\xaeL\xc6\x9e\xe7\xc1\x94\x9f\xe1\xa5\x0b\xddk\xf7]\x04\xc9\xea\rKF\x87\xea)G\xa8\xc6\xee_O\xe0\x9a\xa4XIQ\xd8\r\xcd]\x93\xa9\x19>\x06\x83\xea*\xff\x00\xfc\xf4\xe4\xff\x00\xe6\x8e5T\x1e\x9d\xb0\xf4e\x1a\xb5e\x84\xe3|\xd9e\x12\xe6;\xfaa\xb0\xb7\x87\xfa\xa9"\x82,SG\xe8w)\xcdm\xba\x87{\xb6cv\xb8Sg]-{\x036Ab4d\xb0\xe8Y}\xce\x00\xad\x7f\xa14\xae\x95S{\xa4L\xb9\x18\xdfPxc\xee\xac%\x99r\x97\x01\xdf\xe51\x05\xa1\xfd\xe4PY\x82\xf9\xa6\x9a\xb3~\x82\x1b\x99\xaa\x8f@\xf1PR\xf3V\xbbDf\x9aW/T\x83 \xbc\xbe4\xaf\xf2\x8e\x81"Z\xd6\xec\xcb\x0e\xa5!\xbb\xa2\tq\xb6\'\xc5B\x10\xb2}\x94Z\'d\x9f\xd1L\xfbV\xf5je\x9a\xf5l\xc4q\xfb+\xd7\x9c\x9e\xe8\xc2\xdff"^\xf2\xec\xc7a\'b\xfc\xa7Gt7\\\xec\xe9\xceY\x0e\xc12\xf1\x9b\xeaC\xf6\xa8\xd1\x90\xa9\x12bci\x16\xa8\x8d\x81\xf9\xdf\xd9O\xbch\x11]\xdfA\xe0-\xf9\x10\xf2\r\xb1\x0b\xc3nq\xf3\xe0y\xbczI>\x9c\x9ecs\rG\xeb\xba+\x90e\xbd-k\x868\xc8\x92\xbcU\xfb\x8c5 -\xb9\xb6\xb2\'\xb0\xb4\x1f\x8c\x16w;S\x87\x8f\xa9V(\x19\x03Sb\xdc2\xe6#\x84\xa8\x0f\xdb.\xc6\xba\xa0\xb7\xf8T]iG\xcc\x86\xb6;\xa8\x05\x9f\xd3M\x87\x15\xc5\xed\x96\xf8\xcc\xbf\x1e\xdd\x12\x03\xcb@/7oZ\x91\x15d\xfcI@\xe2\x92\x0f\xa8;PS\xcfH\xb5S0\xd2l\xc1\xd9l\xb4\xf2\x1b\x90\xca\xa3\\`\xba\x0b^3+\xfa+\xd1h\xf5B\xaa\xd8Z\x07\x96\xe9\xe5\xfbM,G\x14\x9c\xcc\x88Qb\xb4\xca\xdbN\xc9u\x87v\xddHy\xbf\x81{\xd7z\xba\xe38\xfd\xdd\xae\x17+\\9\xa9\xfc\xb2\x18C\xc3\xfb\xc1\xaee\x1fF\xb4\xc6\x1c\xe16\x0e/\x02\xdd+b<\xc4\x06\xcc\x17H\xf9\x15\xc7($Pq}y\xb51\x9aYZ\xb2Z\xe2M\x99v\x8b-\xa9q]\x8c\x84\xf8\x11\xddF\xe9\xdaK\xae\x10\x80\x85$\x90\xa4\x82UQ?\x11\xe8\xb1\xf7\xe7K\x9f\x92\xde\xda\x8c\xe4\xdd\x8c\x98\xb6\xa6\xf6\x0e\xfc\xd2\xe3\xae\xeev>\xe14\xdam\x16Fm\xcc\x96\xd0\xfc\x97Q\xcbp\x1fyO\x14\xff\x00"\xbe\xfbVb\x83\x00\xcd\x8a\x0b1V\xc9G\x88\x95\xb2\x19YY\xe4T\xde\xc5<O\xd3c\xe9U\xc9\xd1\x1d(\x13\xbai\xea\x0e@\x8f\xb9y\xd53\x13\xeb\xfb\x1byUe\'\x9cCm\xa9k;% \x92~\x83\xbdD}\x0c\xd3\xb4X\xf4J\xdfh\x94\xd8\x0f\\\x98\x97*g\xeb\xb9\x958A\xfd)XM\x050O\xe2\xabV\xf4>\xfadt\xf5`\x8a\xf8(\xda}\xc8Gu\x07\xb8Pt\xaf\xfa.\xaa\xcbr\x84\xe4+\x84\xa8\xcb\xfcl<\xe3J\xfem\xa8\xa6\xac\xcb\xd1\x93\xb3\x1c\xd0\\v\x1b,~\xfb\xf6\xad\xc6K\n_f\xca\x9bw`\xa3\xc4\xef\xc1\x1f\x15\x04\xeb\xeaF*\xe4\xe8>\xa2\xb6\x91\xb9\xff\x00\xe3\xf3\x95\xff\x00\x829R8\xfb:\xf16\xaeY\xf6_tu\x1b\x88VQ\x15?E\xce^\xdf\xec\x8a\xb1Voh\x17\x9cJ\xfbl\xe1\xc8N\xb6\xcb\x8d\xb7\xf9\xcd)\x14\x9c\xbe\xcd\xd8\x01\x9cO=x\xa7gM\xd2#*\xfax-\x1a\x04\x1b\x9f\xe2\xcfc9u\xd2\xd4\xb0\xaf\xf0\xce\xec\x92\xaft\xa8r\x15\xa3\xdb\xe7I\x83:4\xa8\xee\x14<\xc3\xa8u\xa5\x8fT\xad\xb3\xc9\'\xfa\x11M\xb3\xaf\x8d86L\xe2\xd9{a\x82\x96.\x08y\x97\x0f\xb74+\xc5G\xf6.\x94\r\x05\xae:G\xbf\r@\xbb\xea\x16\xa1H\x1bH\xbb\\\x18\x86\xdbj;\x98\xec\xc6h\x10\xd0\xa9_\xaf\xd8\x96A\x94\xe9}\xe2\xddg,\xf9\xd0\xb8\xb2Zi\xe5\x86\xdb|Ey/)\xa2\xa3\xd9<\xc2v\xdc\xd2!\xe8KPgE\xca\xe4c-d\x08\xb7?3w\xa1\xb4\xfb!\xe8\xd3\nA+a{\x14).|M\xa8U\x80\xb2\xbcV\xfb\x95\xc2\x8bk\x990D\xb7\xb8\x9d\xeeF*\xd4\x1c\x94=\x98mGb\x84\x1f\x8d^\xbe\xc2\x81\x1f\xe1\x1a7t\xd5\x1c\xed\x8b\x8cf\'@f\xdc\xda\xe3\xc8\x96\xee\xc1\xb6Tw\x05\t\x1d\xc2\x9c\xd8\xfa\ny\xec\xc1\x7f\x11\xc3`[\xa0\xbd"k\xa8\xf2\xf0\xa2\xb9%E\xc5rp\x86\xd2\xa7\x0f\xe5H\xae\x9fd\xb2Z\xac\xd6\xa8\xb0 Cj,X\xc8\x08e\x86\x93\xc5\x08O\xc8\x01Y\x05!*\xdbp\x0e\xc4\x1a\x01\x1b\xf1\x1d\xf7\xaf\xba\xf2D\xa8\xd1\x99[\x8e\xb8\x96\xd0\x81\xba\x94\xa2\x00\x03\xeaMj.\xdef\xc8B\x95\n0\xf0\xc0\xdc\xc9\x90KM\x01\xf9\x80\xdb\x92\x87\xfa\x0f\xad\x06\xdd\xb8\xadz\xff\x00\x94\xd8\xecp\x9d\x91:b\x19B\x1bZ\xc8\xd8\xad\xc5%\x03s\xc1\xb4\x02\xb5\x10=\x80\xa5\xcb\xa9\xdd]\xe8\xc6 \xe3\x8c=\x90\xca\xc8\xe7 \x90a\xdaHK\x08?\xf5\xba\x08M.\xbb\xef\xda\x1b\x7f\xe7,c\xf8\r\xa2\x00q\xa5\xa1\x0fIur^\xfed\xa3\x85\x05\x8e\x14b^l\xc9-\xb8T\xc4\xb6RB\x93\xdb\x93n\x80}\xfd9\x03Yd\xb6\x84 % \x006\x00\x0f`+M\xc0\xa4;#\t\xc7\x1ep\x82\xb7mp\x96\xa2\x06\xdb\x952\x92k\xf9\xb5\x07\'c\x18\xc22\x1b\xdb\xa4p\xb6\xdbeJ\xd8\xfb\x96[*\x03\xfa\x9a\nNj\x9ab\xa7S\xb31\x1d@\xb2/\xb7\x10\xd1\x1e\x85\x1e:\xf6\xa63\xa7\x9dNc\xbaM\xa0\xb6\xcbV3\t\xa9Ym\xcc\xc9zt\xa7\x07&a\x82\xea\x83A[\xfe5\x84\xf7J\x07\xdd\xa5+&C\xaf\xc8u\xd7\x15\xba\xdcZ\x96\xa3\xf3*;\x9a\xdb1\x0cJ\xfd\x96dp,\xb6\x88\xc2D\xf9\xab(\x8e\xc9q-\xf3XIW\x1eK \x02@\xa0\xbe!\xf4\xa5\xad\xd3\x166\xd6!\xa9Z\xe3\x8e\x01\xc5\x0c_\xe2\xcf\x8e>q\xe7\xb6\xb5\xa2\x99Up+\xdd\x816\x8dI\x81\x95\xb7\xb2\x1a\x97\x03\xf6M\xcf\xf4x\x9e,W\xcf\xf9k%\x07\xe8\xba\x0eC\xd5N\x91\x9dB\xd2\x9b\xd4H\xe8\xde|FL\xc8Cm\xca\x9e\x8c\n\xc2\x07\xd5Ct\xd59\x82\x07"\x0e\xe2\xaf\xe2N\xe9\xaao\xeb&\x9f\xb2:\x9e\xc8\xb1\x88m\x06\x1b\x99\x93%\x86\x10\xda{6\x99\xcbJ\x87\x11\xf4\x0ePsM-\xc9q\xdc\x7f$n6Ko\x93\xe4T\xfbj\\\xa8\xa7\xc1\xb8\xdb^A\xdd\x12\xa2\xaf\xf3\xa3\xdd\x07p\xaa\xb9N\r:\xe13\x1d\xb7\xbe\xf5\xda%\xd9\xb7\xa3\xb4\xe3\x17(\xe8\xf0\xd3-\xa5\xa7t\xba\xa4\r\xc2T\xa1\xdc\xf1;R \xb9t\xe7\x0fQ\xbc\xf61&K\x16\x9dB\xc5\x99\xf0$\xbe\xe0!\x8b\xcc4v\x8b;\xea\x16\x9d\x92\xb5\x8e\xe0\xd6O\xa4\x8dc\xca4\xdf<\x7fJs`\xb8\x8d\xf9\xa2\xcc\x0f\x1c\xff\x00\xf5%\xaf\xb8g\x7fv_\xf8(,#Z\xb3\xd7\xb0\xec\x87\x98\x81\xc2C\xcd,\xb6\xee\xca\xd9\x0c\xaf`vuC}\x95\xb1\xdf\x88\xef[@\xa8#\xafk\xd5\x8c6\xdb?0\xc0\x91\x1a[\xa8@]\xe6\xd3!\x82\xf2$!\x91\xb0\x96\xcf\x02\x95\x07\x9bOe\xfedPjz\xf1\xd4\x9e\x03\xa5+C3\xf9\xdf\xb2%7\xcd\x9b{D6\xdb\x1f%\xac\x9d\xc3C\xfdWU\xe4\xd5\xae\xa6ukR_}\x17;\xd2\xe3[\xd6N\xd6\xc8d\xb1\x14\'\xe4\xb0\x0e\xee\x7f5\xd7\xdeq\x9cj&\xbc\xe7\xb6V\x19\xb0\xc3\x13\x11\x18D\x87\x06\xde\xd1m\xb0\x9d\xcb\xabY+\'\xdc\x92\xa5\x13O\xa7\xa7\x9e\x8c0\xac\x12\x1cK\x9eE\x1e=\xeb \xd8,\xa9\xc1\xce,C\xf2e\n\xfcJ\x1f\x9c\xd0"}1\xe9OZs\xf43"\r\x85P\xa0;\xb1\x13\xe7\x93\x15\x82\x0f\xba\x01\x1c\xd7\xff\x00h\xa6S\x0b\xec\xef\xc7mvV\x9f\xbe\xe6S$\xca+\x1c\xdb\x82\xc2\x19l\r\x89PIw\x994\xfd\xc2@\xaf$B\x8e\xf8Hq\x01@(+\xbf\xcc\x1d\xe80\xd8\xd5\xb96\xcb\x05\xb2\x08\xdfh\x90\xe3\xb1\xdf\xd7\xf7M\x84\x7f\xea\x95\x07\xda\x05\xaa\x91lzf\xc6+\x1aJ|\xfd\xf9\xe4\x17\x9b\x07\xef\xa2\x13\x07\x99W\xfd\xeb\x00S+\xd4\x9dC\xc6\xb0,:\xe7~\xbcI\rD\x86\xde\xe4\x0f\xc6\xf2\xcfd4\xd8\xf7Z\xcfaT\xbe\xd5]J\xbfj&uu\xc8\xae\x8a\xd9\xe9n}\xc6\x81\xdd\x0c2\x8e\xcd\xb4\x8f\xa2\x05\x07\x17\xdbz\xeb\x9aW\x92\xaf\x1a\xd4\x9cJ\xf0\x95m\xe4.\xf0\xdfW\xe8C\x83\x95?^\x98\xfaQ\xb4\xb7\xa2wy\x19\x1d\xb5\x95\xdd2\xbbz\xd2\xd7\x8c\xd0+\x81\x19\xd4\x10\xcf\x1ft\xb8I\x0b5\x08 \xf4;\x95d:E`\xc8\xec\x12\xd2o\x0e7(\\-R\x88o\x92\xd9}m\x0f\x01\xcfc\xb2=\x17Ahz\xf2C\x0c\xbc\xcb\x8d\xb8\x84\xad\x0bIJ\x92F\xe1@\x8d\x88?C^\xd1A\xa9\xd9\xe0]\xa08\xe4g$\xa5\xf8iH\xf0\x14\xbd\xfct\x0f\xc8\xb3\xe8\xb0=\x95\xd8\xfc\xe94\xbd\xa6\xc6\xfd\xf6\x85M\x9b\xe0o\x16\xd5\n\x1d\xdd\xf3\xed\xe2"2\x1bk\xfb\xe9\xe0\x9a\xe4x\x8e\x1d\n\x1eQ\x95dE\x92\x99w\xc7\xa3\x05\x95z\xa6<&\x83,\xa3\xfd\xd6G\xd6\x83\x1f\x9a\xe16\xa9w\x8bNA\xe4\x8a\xe7\xda\xd2\xa4\x07\x9a%\x0f\xf9w;\xac6\xb4\xecy$\xfd\xe0=\x15\xdd\'\xd6\xa0\xb7S\xfd8\xdfu2\x14k\xa5\x9d\xbbs\xb7xm#\xc9\xce\x0f\x18o\xad\xbd\xf9x.\xf6(p{\xa1[\xa4\xa4\xd3U\xa3a\xb6\xd4\x10\x07\xa6mwVUg8\xc6L\xa5\xc2\xcd,\x9b\xc6\xb9B\x93\xb3o\xc8\xf0{y\x84\x0f}\xc7\xe3\xa9\xfb\xd8\xd4\x0c\xea\'\xa6KF\xa5Ff\xebl\x93\xfb\'(\x80\x90a]\x11\xba9\xf0\xf4i\xf2\x8e\xfc~K\xf5E-\xad<\xea_\xa8\x0c\x07Q \xe19\xf2#/\x9b\xc8a\x0f\xdc\xc1h\x8e}\x90\xb1%\xa0y4\xb3\xf1\xd03\xf8\x1d9b\xf8\xce\xa7\xdc\xb2\xfcr*"\xb9s\x88\xb8\xf3a\xa4\x86\xd2\x82\xb7\x12\xe9~)\xd8\x86\xd4J>\xfa\x08\xe2ji\xc1y\xf7\x1b%\xc8\xead\x83\xdc)IQ\xfe{\xa4\x91\xb5F\x865\xef\x11\x81{b\xcb\x94\x871k\xab\xc0\x96\x18\xb9\xad\tf@\x07nQ\xe4\xa0\x96\x96?\xa8UI\xd6d\xb0\xf3Hq\xb7\x12\xb4,\x02\x95$\xee\x92\x0f\xb8#\xb1\xa0\xfa\xac6A\x7f\xb4X\xac\xf3n7\x19\x8dD\x87\x11\x95\xbb"C\xaa\xe2\x86\xd0\x81\xb9&\xbfk\xe5\xf6\xd1d\xb5K\xb8\\f\xb3\x12$V\x8b\x8f\xbe\xf2\xc2\x1bm\t\xf5*Q\xaa\xa8\xf5a\xd5,\xedM\xbc*\xcde}\xd61\x88\x8e\x0e\t\xee\x85Ou?\xc7t~A\xf0"\x83\x9bu?\xd4U\xd3Vr\xdd\x98.\xc6\xb0@Z\x85\xba"\x8e\xc5^\xc6C\xa3\xfeb\xeb]\xe9kJ\x06\xa3k\r\x96\xdd!\xaev\xe8g\xcf\\\xbeF<r\x0f\x03\xfa\xd4B*\x1a%\xb5\xa9@\x01\xb9>\x83\xdc\xd5\x8a\xfe\xcf\xad>\xbbc\xb6l\xa7 \xb9Y\xe72\xfd\xc5q\xe2\xc3B\xe3-\nS\rn\xe2\xdc\x1c\xc0\x1c\x14\xa3@\xf2\xd2\xdaR\x80\x90\x00\x00v\x02\xb96\x16\xech\x97\\\x96\xcc;\x18\x93\xcc\xa6\xd1\xb7\xf0n;\xbe\x08\xfax\x9c\xc5iyf\xb5`\xd8\xd3N\x0b\xaeIc\xb6\xba7\x01\xa9S\xd0]\xdf\xfc\xa6y*\x94Fo\xd5\xdd\x9a\xc7\xa9\xf6,\x8e\xd3\x9b\xb7\x90F<\xe1\xddm\x90\xac\xeb\x82\x83\x08n\xb6\xf8\xbd$\x92\xb5\xa5t\x16\x05\xa2\x8a(\n(\xa2\x80\xa2\x8a(\n\x8f\xba\xcb\xa2xV\xa8b\xaeZ\xafQ>\xfa9*$\xc6\xf6\x12"\xb8~6\xcf\xfb\xa4\xf65 \xa8\xa0S\x99\xc6\x85\xde3m(\xb3\xe2\xb9\xa4\xdd\xae\xb8\xcc\xd4y[\xdb\t\xe7\xe7`\x7f\xc2/\x00\xbf\x8c \x8f\x15\xb3\xee\x9aU\x19\xa5\x9f\xaa.\x9d\xee\xa9\x0c\xdf\xe7\xa2\xd7\xe2\xed\x1ete\x97\xe0=\xf2J\xd0\xe0!\x0b\xff\x00\xa1Uh\xec\xa6T\x08VyR$D2\x1bm\x07v\xc6\xdb\x9f\x13\xf7~\xaa\xd8\x01\xf7\xbb\x9faK\x03Yz\x9a\xd2\xacN\xc8\xed\x82\xf9%\x19=\xc1\r\x86$\xd9\xed\xea\xff\x00\x0b\xf7>\t\x8f\xab\xfb\xd3@\xa5M\xf7\xaa^\xa3\x1f\x8di.\xc8\x9f\t\xb5x\xbc\x12\xdbp\xa0\xa0\xa4\xf1.8R\x12\x14Ev\x06\xfar\xe9\xf7M\xd7\xbe\xa7\xeacr\xae\r\xf7U\x96\xcd\xba\xd6>\x8bP\x05u\xc4\xf3>\xa6s\xfc\xf9\x176#<\xce7\x16\x15\xb1b\xdd\x02\xd4\xa3\x15\x01\x94\xad\nu\x95-;\x15\xee\x8a\x858\xa6\'{\xca\xae\xaf\xc7\x8a\xb6Q\xe12\xb92\xa4\xc9x2\xc3\r \x80\xa7^q~\x89\xdc\x81\xf3$\xd01\x99\xfdW`x\x80\\]/\xd2\xdbE\xa4\'\xb2n\x97\x16\xfc\xdc\xd5\xd4@\xce\xba\x88\xd6|\xd5K\x17\x9c\xc2\xe0\xeb\'\x7f\xf0\xcc\xb9\xe5\x98\xfe\xad\xb3\xc4\x1a\xe3\x99\x86!|\xc52\tV\x9b\xa3\tnK\x1c\x15\xf7\x16\x1cm\xc6\xdcHZ\x1cmi\xdc-\x0bI\x05*\x15\xa1\xd0}\x95\xa8\x92I\xef\xf3\xaf\x9d\xc9\xaf(\xa0\xbf\xe5\x14Q@QE\x14\x05\x14Q@QX\xeb\xad\xe6\xd9l\x82\xec\xa9\x92\xd9\x8c\xc3cu\xba\xea\xc2\x12?\xa9\xae/q\xd5\xb8\x0cN\x8c\xcc\\~\xfdqi\xcf\xc6\xfc8\nu-n7O4\x12\x95\xec\xafeq\xda\x82=u\xb2\xc5\xc8\xf4\xed\x94\xbd\x0ed\x88\xea\x8e\xb8k_\x82\xb2\x82\xe3E\xf4\xa1hV\xdf\x01\n\xaa\x83\x12J\xbb\x9a~\xfdSus4\xc2\xc9pd\xe2l4&Br4\x93&R\x1e}\x82\xb26+Lr\xa4!\xc1\xf97$R\x05\'s@\xc8\xf2\xeb>\x8b\xd8\xf0[\x04\xfbj\xad\xb2\x17\xb5\xa1L\xbf\x1ej\x9c\x9f)N\xb6\xa1sfdr\xa2\x1aJ>\x05l\x9a\x8a\x18\xfeYs\xc0r\x1b\xf4f\xe1\xc4\x9f\x1aS\x0e\xdb\xe7D\x96\x82\xa6eF+K\x83~\x05*\x1d\xd0\x95\xa5I \xd63\x07\xc0\x9d\xc9Y\xba\xcav\xf3\x02\xd3\x02\xdc\x86<\xcc\xd9\xbe)i+\x92\xbf\r\xa4l\xc2\x1c^\xea>\xfbl\x00\xaf\xd7P1\xcb\xa5\x9e\xe1\xe5\xe7\xb6\xd0\x97\t\xc7-\xd3<5\x05\xa4\xbf\x0fd\x85\x02=B\x90RA\xf7\xa0\xd7\xb3|\xd2\xf5\x97_\x9c\xb9\xdc<4\xac\xb4\xcb\x0c\xb2\xcax2\xc3\x0c 6\xd3-\'\xbe\xc8BF\xc2\xb9\xc5O\xfd`\x8d\xa3l`\xf1E\x81\xeb"\xdfS\xd0\r\xb3\xc8)\xf5N\xf2\xe5\x82e\x9b\xa1w\xees.m\xc0\n\x80\x14\x05\x15\xfb\xb2\xcb\xaf:\x86\xdbB\x96\xb5\xa8%)H\xdc\xa8\x9e\xc0\x01Y\xdb\xb5\xb9\x88\x0e%\x83!.\xbe\x9f\xf8\xc1\x04)\x08W\xe4\n\x1f\x88\x8fr;P\x7f\xff\xd9')

def delete_photo(mydb, photo_id):
    try:
        sql = "DELETE FROM photos WHERE photo_id = %s"
        cursor = mydb.cursor()
        cursor.execute(sql, photo_id)
        
        return cursor.lastrowid
    except mysql.connector.Error as e:
        print(str(e))


    


# Get car by id
def get_car(mydb, data):
    try:
        sql = "select * from cars where car_id = %s"
        cursor = mydb.cursor()
        cursor.execute(sql, data)
        return cursor.fetchall()
    except mysql.connector.Error as e:
        print(str(e))

# Get all users
def get_users(mydb):
    try:
        sql = "select * from users"
        cursor = mydb.cursor()
        cursor.execute(sql)
        return cursor.fetchall()
    except mysql.connector.Error as e:
        print(str(e))

# Get a user by id
def get_user(mydb, data):
    try:
        sql = "select username, email from users where user_id = %s"
        cursor = mydb.cursor()
        cursor.execute(sql, data)
        return cursor.fetchall()
    except mysql.connector.Error as e:
        print(str(e))

# Remove a user by id
def remove_user(mydb, data):
    try:
        sql = "DELETE FROM users WHERE user_id = %s"
        cursor = mydb.cursor()
        cursor.execute(sql, data)
        mydb.commit()
        return cursor.lastrowid
    except mysql.connector.Error as e:
        print(str(e))

# Edit a user by id
def edit_user(mydb, data):
    try:
        sql = "UPDATE users SET username = %s, email = %s \
            WHERE user_id = %s "
        cursor = mydb.cursor()
        cursor.execute(sql, data)
        mydb.commit()
        return cursor.lastrowid
    except mysql.connector.Error as e:
        print(str(e))

def get_cars(mydb):
    try:
        sql = "select * from cars"
        cursor = mydb.cursor()
        cursor.execute(sql)
        return cursor.fetchall()
        

    except mysql.connector.Error as e:
        print(str(e))

def add_car(mydb, data):
    try:
        sql = "INSERT INTO cars \
        (make, body_type, color, seats, location, cost, latitude, longitude) VALUES (%s, %s, %s, %s, %s, %s, %s, %s)"
        cursor = mydb.cursor()
        cursor.execute(sql, data)
        mydb.commit()
        return cursor.lastrowid

    except mysql.connector.Error as e:
        print(str(e))


def db_write(mydb, query, params):
    cursor = mydb.cursor()
    try:
        cursor.execute(query, params)
        mydb.commit()
        
        # print((cursor.lastrowid))
        return cursor.lastrowid

    except mysql.connector.Error as e:
        cursor.close()
        print(e)
        return False


def db_read(mydb, query, params=None):
    cursor = mydb.cursor()
    if params:
        cursor.execute(query, params)
    else:
        cursor.execute(query)

    entries = cursor.fetchall()
    cursor.close()

    content = []

    for entry in entries:
        content.append(entry)

    return content


# Remove a car with car_id
def remove_car(mydb, data):
    try:
        sql = "DELETE FROM cars WHERE car_id = %s"
        cursor = mydb.cursor()
        cursor.execute(sql, data)
        mydb.commit()
        return cursor.lastrowid
    except mysql.connector.Error as e:
        print(str(e))

# Edit a car by id
def edit_car(mydb, data):
    try:
        sql = "UPDATE cars SET make = %s, body_type = %s, color = %s, seats = %s, location = %s, cost = %s, latitude = %s, longitude = %s \
            WHERE car_id = %s "
        cursor = mydb.cursor()
        cursor.execute(sql, data)
        mydb.commit()
        return cursor.lastrowid
    except mysql.connector.Error as e:
        print(str(e))

# Lock a car by id
def lock_car(mydb, data):
    try:
        check = "SELECT * FROM cars WHERE car_id = %s"
        sql = "UPDATE cars SET locked = 1 WHERE car_id = %s"
        cursor = mydb.cursor()
        cursor.execute(check, data)
        if not cursor.fetchall():
            return None
        cursor.execute(sql, data)
        mydb.commit()
        return cursor.lastrowid
    except mysql.connector.Error as e:
        print(str(e))

# Unlock a car by id
def unlock_car(mydb, data):
    try:
        check = "SELECT car_id FROM cars WHERE car_id = %s"
        sql = "UPDATE cars SET locked = 0 WHERE car_id = %s"
        cursor = mydb.cursor()
        cursor.execute(check, data)
        if not cursor.fetchall():
            return None
        cursor.execute(sql, data)
        mydb.commit()
        return cursor.lastrowid
    except mysql.connector.Error as e:
        print(str(e))


# Get all cars that are locked
def get_locked(mydb):
    try:
        sql = "select * from cars where locked = 1"
        cursor = mydb.cursor()
        cursor.execute(sql)
        return cursor.fetchall()
    except mysql.connector.Error as e:
        print(str(e))  

# Get all cars that are unlocked
def get_unlocked(mydb):
    try:
        sql = "select * from cars where locked = 0"
        cursor = mydb.cursor()
        cursor.execute(sql)
        return cursor.fetchall()
    except mysql.connector.Error as e:
        print(str(e)) 

# Get all bookings booking_dates of a car
def car_booking_dates(mydb, data):
    try:   
        sql = "select booking_date from bookings where car_id = %s"
        cursor= mydb.cursor()
        cursor.execute(sql, data)
        return cursor.fetchall()
    except mysql.connector.Error as e:
        print(str(e)) 

# Get all bookings return_dates of a car
def car_return_dates(mydb, data):
    try:
        sql = "select return_date from bookings where car_id = %s"
        cursor = mydb.cursor()
        cursor.execute(sql, data)
        return cursor.fetchall()
    except mysql.connector.Error as e:
        print(str(e)) 

# Add a booking
def add_booking(mydb,data):
    try:
        sql = "INSERT INTO bookings \
        (car_id, user_id, status, booking_date, return_date, price) VALUES (%s, %s, %s, %s, %s, %s)"
        cursor = mydb.cursor()
        cursor.execute(sql, data)
        mydb.commit()
        return cursor.lastrowid

    except mysql.connector.Error as e:
        print(str(e))

# Edit a booking with id
def edit_booking(mydb, data):
    try:
        sql = "UPDATE bookings SET status = %s, booking_date = %s, return_date = %s, price = %s\
            WHERE booking_id = %s"
        cursor = mydb.cursor()
        cursor.execute(sql, data)
        mydb.commit()
        return cursor.lastrowid

    except mysql.connector.Error as e:
        print(str(e))

# View rental history of a car (all of its bookings)
def bookings_history(mydb,data):
    try:
        sql = "SELECT * FROM bookings where car_id = %s"
        print(sql)
        cursor = mydb.cursor()
        cursor.execute(sql, data)
        bookings = cursor.fetchall()
        return bookings
    except mysql.connector.Error as e:
        print(str(e))

# View rental history of a user (all of their bookings)
def bookings_history_u(mydb,data):
    try:
        sql = "SELECT * FROM bookings where user_id = %s"
        print(sql)
        cursor = mydb.cursor()
        cursor.execute(sql, data)
        bookings = cursor.fetchall()
        return bookings
    except mysql.connector.Error as e:
        print(str(e))


# Remove a booking
def remove_booking(mydb,data):
    try:
        sql = "DELETE FROM bookings WHERE booking_id = %s"
        cursor = mydb.cursor()
        cursor.execute(sql, data)
        mydb.commit()
        return cursor.lastrowid
    except mysql.connector.Error as e:
        print(str(e))

# Get all bookings
def get_bookings(mydb):
    try:
        sql = "select * from bookings"
        cursor = mydb.cursor()
        cursor.execute(sql)
        return cursor.fetchall()
    except mysql.connector.Error as e:
        print(str(e))

# View reports
def view_reports(mydb):
    try:
        sql = "select * from reports"
        cursor = mydb.cursor()
        cursor.execute(sql)
        return cursor.fetchall()
    except mysql.connector.Error as e:
        print(str(e))

# Add a report
def add_report(mydb, data):
    try:
        sql = "INSERT INTO reports (car_id, user_id, content, report_date) VALUES (%s, %s, %s, %s)"
        cursor = mydb.cursor()
        cursor.execute(sql, data)
        mydb.commit()
        return cursor.lastrowid
    except mysql.connector.Error as e:
        print(str(e))

# Remove a report
def remove_report(mydb, data):
    try:
        sql = "DELETE FROM cars WHERE report_id = %s"
        cursor = mydb.cursor()
        cursor.execute(sql, data)
        mydb.commit()
        return cursor.lastrowid
    except mysql.connector.Error as e:
        print(str(e))

# Edit a report and change its content
def edit_report(mydb,data):
    try:
        sql = "UPDATE reports SET content = %s \
            WHERE report_id = %s"
        cursor = mydb.cursor()
        cursor.execute(sql, data)
        mydb.commit()
        return cursor.lastrowid

    except mysql.connector.Error as e:
        print(str(e))

# Get all engineers
def get_engineers(mydb): 
    try:
        sql = """ SELECT email FROM users WHERE role = "Engineer" """
        cursor = mydb.cursor()
        cursor.execute(sql)
        results = cursor.fetchall()
        engineer = []
        for result in results:
            engineer.append(result[0])
        return engineer
    except mysql.connector.Error as e:
        print(str(e))

def count_carmake(mydb):
    try:
        sql = """ SELECT c.make, count(*) FROM cars AS c, bookings AS b Where b.car_id = c.car_id group by c.make; """
        cursor = mydb.cursor()
        cursor.execute(sql)
        results = cursor.fetchall()
        return results
        
    except mysql.connector.Error as e:
        print(str(e))